AWSTemplateFormatVersion: '2010-09-09'
Description: 'Resume Optimization Website Backend Resources - Portable Version'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name
  
  FrontendDomain:
    Type: String
    Default: '*'
    Description: Frontend domain for CORS (use * for development, specific domain for production)

Resources:
  # Storage Layer
  ResumeStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'resume-optimizer-storage-${AWS::AccountId}-${Environment}'
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - HEAD
            AllowedOrigins:
              - !Ref FrontendDomain
            MaxAge: 3000

  UserHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'ResumeOptimizerUserHistory-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: jobId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: jobId
          KeyType: RANGE
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true

  # Authentication Layer
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub 'ResumeOptimizerUserPool-${Environment}'
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireNumbers: true
          RequireSymbols: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub 'ResumeOptimizerWebClient-${Environment}'
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED

  # Processing Layer
  AIHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: AIHandlerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: !Sub '${ResumeStorageBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: !GetAtt UserHistoryTable.Arn
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                Resource: 
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
              - Effect: Allow
                Action:
                  - 'textract:DetectDocumentText'
                Resource: '*'

  ResumeProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ResumeProcessorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Sub '${ResumeStorageBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: !GetAtt AIHandlerLambda.Arn

  AIHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ResumeOptimizerAIHandler-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt AIHandlerRole.Arn
      Timeout: 300
      MemorySize: 2048
      Environment:
        Variables:
          STORAGE_BUCKET: !Ref ResumeStorageBucket
          USER_HISTORY_TABLE: !Ref UserHistoryTable
      Code:
        ZipFile: |
          # Placeholder - will be replaced with actual code
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder function'}

  ResumeProcessorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ResumeOptimizerProcessor-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt ResumeProcessorRole.Arn
      Timeout: 180
      MemorySize: 512
      Environment:
        Variables:
          STORAGE_BUCKET: !Ref ResumeStorageBucket
          AI_HANDLER_FUNCTION: !Ref AIHandlerLambda
      Code:
        ZipFile: |
          # Placeholder - will be replaced with actual code
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'Placeholder function'}

  # Status Checker Lambda for async processing
  StatusCheckerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: StatusCheckerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub '${ResumeStorageBucket.Arn}/*'

  StatusCheckerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ResumeOptimizerStatusChecker-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt StatusCheckerRole.Arn
      Timeout: 30
      MemorySize: 256
      Environment:
        Variables:
          STORAGE_BUCKET: !Ref ResumeStorageBucket
      Code:
        ZipFile: |
          import json
          import boto3
          import os
          
          s3 = boto3.client('s3')
          bucket_name = os.environ.get('STORAGE_BUCKET')
          
          CORS_HEADERS = {
              'Access-Control-Allow-Origin': '*',
              'Access-Control-Allow-Headers': 'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token',
              'Access-Control-Allow-Methods': 'OPTIONS,GET',
              'Access-Control-Allow-Credentials': 'true'
          }
          
          def lambda_handler(event, context):
              if event.get('httpMethod') == 'OPTIONS':
                  return {
                      'statusCode': 200,
                      'headers': CORS_HEADERS,
                      'body': json.dumps({})
                  }
              
              try:
                  user_id = event['pathParameters']['userId']
                  job_id = event['pathParameters']['jobId']
                  
                  status_key = f"users/{user_id}/status/{job_id}/status.json"
                  
                  try:
                      response = s3.get_object(Bucket=bucket_name, Key=status_key)
                      status_data = json.loads(response['Body'].read().decode('utf-8'))
                      
                      return {
                          'statusCode': 200,
                          'headers': CORS_HEADERS,
                          'body': json.dumps(status_data)
                      }
                  except s3.exceptions.NoSuchKey:
                      return {
                          'statusCode': 404,
                          'headers': CORS_HEADERS,
                          'body': json.dumps({'error': 'Job not found'})
                      }
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': CORS_HEADERS,
                      'body': json.dumps({'error': str(e)})
                  }

  # API Layer
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'ResumeOptimizerAPI-${Environment}'
      Description: API for Resume Optimizer application
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: ResumeOptimizerCognitoAuthorizer
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt UserPool.Arn

  # Optimize endpoint
  OptimizeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: optimize

  OptimizeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref OptimizeResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResumeProcessorLambda.Arn}/invocations'

  OptimizeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref OptimizeResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${FrontendDomain}'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Status endpoint
  StatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: status

  StatusUserResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref StatusResource
      PathPart: '{userId}'

  StatusJobResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !Ref StatusUserResource
      PathPart: '{jobId}'

  StatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref StatusJobResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StatusCheckerLambda.Arn}/invocations'

  StatusOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref StatusJobResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: !Sub "'${FrontendDomain}'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - OptimizeMethod
      - StatusMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  # Lambda permissions for API Gateway
  ResumeProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ResumeProcessorLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/optimize'

  StatusCheckerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StatusCheckerLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/status/*/*'

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiEndpoint'
  
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'
  
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientId'
  
  StorageBucket:
    Description: S3 Bucket for resume storage
    Value: !Ref ResumeStorageBucket
    Export:
      Name: !Sub '${AWS::StackName}-StorageBucket'
  
  Region:
    Description: AWS Region
    Value: !Ref AWS::Region
    Export:
      Name: !Sub '${AWS::StackName}-Region'
