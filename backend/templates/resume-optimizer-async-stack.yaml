AWSTemplateFormatVersion: '2010-09-09'
Description: 'Resume Optimization Website Backend Resources with Asynchronous Processing'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name

Resources:
  # Storage Layer
  ResumeStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'resume-optimizer-storage-${AWS::AccountId}-${Environment}'
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000

  UserHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'ResumeOptimizerUserHistory-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: jobId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: jobId
          KeyType: RANGE

  # Authentication Layer
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub 'ResumeOptimizerUserPool-${Environment}'
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub 'ResumeOptimizerWebClient-${Environment}'
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # Processing Layer
  AIHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: AIHandlerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: !Sub '${ResumeStorageBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: !GetAtt UserHistoryTable.Arn
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'textract:DetectDocumentText'
                Resource: '*'

  ResumeProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ResumeProcessorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                Resource: !Sub '${ResumeStorageBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'  # Will be updated after AIHandlerLambda is created

  StatusCheckerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: StatusCheckerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                Resource: !Sub '${ResumeStorageBucket.Arn}/*'

  AIHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ResumeOptimizerAIHandler-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt AIHandlerRole.Arn
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          STORAGE_BUCKET: !Ref ResumeStorageBucket
          USER_HISTORY_TABLE: !Ref UserHistoryTable
      Code:
        ZipFile: |
          # Placeholder - will be replaced with actual code

  ResumeProcessorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ResumeOptimizerProcessor-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt ResumeProcessorRole.Arn
      Timeout: 30  # Reduced timeout since it returns immediately
      MemorySize: 512
      Environment:
        Variables:
          STORAGE_BUCKET: !Ref ResumeStorageBucket
          AI_HANDLER_FUNCTION: !Ref AIHandlerLambda
      Code:
        ZipFile: |
          # Placeholder - will be replaced with actual code

  StatusCheckerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ResumeOptimizerStatusChecker-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt StatusCheckerRole.Arn
      Timeout: 10
      MemorySize: 128
      Environment:
        Variables:
          STORAGE_BUCKET: !Ref ResumeStorageBucket
      Code:
        ZipFile: |
          # Placeholder - will be replaced with actual code

  # Update Resume Processor Role with specific Lambda ARN
  ResumeProcessorRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InvokeAIHandlerPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource: !GetAtt AIHandlerLambda.Arn
      Roles:
        - !Ref ResumeProcessorRole

  # API Layer
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'ResumeOptimizerAPI-${Environment}'
      Description: API for Resume Optimizer application
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: ResumeOptimizerCognitoAuthorizer
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt UserPool.Arn

  # Optimize endpoint
  ApiGatewayOptimizeResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: optimize

  ApiGatewayOptimizeMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayOptimizeResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResumeProcessorLambda.Arn}/invocations'
      
  ApiGatewayOptimizeOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayOptimizeResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'https://main.d16ci5rhuvcide.amplifyapp.com'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Status endpoint
  ApiGatewayStatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: status

  ApiGatewayStatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayStatusResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      RequestParameters:
        method.request.querystring.jobId: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${StatusCheckerLambda.Arn}/invocations'

  ApiGatewayStatusOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayStatusResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'https://main.d16ci5rhuvcide.amplifyapp.com'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ApiGatewayOptimizeMethod
      - ApiGatewayStatusMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment

  # Lambda permissions for API Gateway
  ResumeProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ResumeProcessorLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/optimize'

  StatusCheckerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref StatusCheckerLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/status'

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL for optimize
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/optimize'
  
  StatusEndpoint:
    Description: API Gateway endpoint URL for status checking
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/status'
  
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
  
  StorageBucket:
    Description: S3 Bucket for resume storage
    Value: !Ref ResumeStorageBucket
