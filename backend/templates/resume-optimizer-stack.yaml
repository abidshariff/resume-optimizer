AWSTemplateFormatVersion: '2010-09-09'
Description: 'Resume Optimization Website Backend Resources'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - test
      - prod
    Description: Environment name

Resources:
  # Storage Layer
  ResumeStorageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'resume-optimizer-storage-${AWS::AccountId}-${Environment}'
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - HEAD
            AllowedOrigins:
              - '*'
            MaxAge: 3000

  UserHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'ResumeOptimizerUserHistory-${Environment}'
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: jobId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: jobId
          KeyType: RANGE

  # Authentication Layer
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub 'ResumeOptimizerUserPool-${Environment}'
      AutoVerifiedAttributes:
        - email
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
        EmailSubject: "Welcome to Resume Optimizer Pro - Verify Your Email"
        EmailMessage: |
          Welcome to Resume Optimizer Pro!

          Thank you for creating your account with us. To complete your registration and start optimizing your resume with AI, please verify your email address.

          Your verification code is: {####}

          Simply enter this code in the verification form on our website to activate your account.

          What you can do with Resume Optimizer Pro:
          • Transform your resume with AI-powered optimization
          • Get past ATS (Applicant Tracking Systems)
          • Increase your interview chances by 3x
          • Download professionally formatted resumes

          If you didn't create this account, please ignore this email.

          Best regards,
          The Resume Optimizer Pro Team

          Website: https://main.d3tjpmlvy19b2l.amplifyapp.com
          Support: Need help? Contact our support team.
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref UserPool
      ClientName: !Sub 'ResumeOptimizerWebClient-${Environment}'
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH

  # Processing Layer
  AIHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: AIHandlerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                Resource: !Sub '${ResumeStorageBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: !GetAtt UserHistoryTable.Arn
              - Effect: Allow
                Action:
                  - 'bedrock:InvokeModel'
                Resource: '*'

  ResumeProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ResumeProcessorPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:PutObject'
                  - 's3:GetObject'
                Resource: !Sub '${ResumeStorageBucket.Arn}/*'
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                Resource: !Sub '${ResumeStorageBucket.Arn}'
              - Effect: Allow
                Action:
                  - 'lambda:InvokeFunction'
                Resource: '*'  # Will be updated after AIHandlerLambda is created

  AIHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ResumeOptimizerAIHandler-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt AIHandlerRole.Arn
      Timeout: 300
      MemorySize: 1024
      Environment:
        Variables:
          STORAGE_BUCKET: !Ref ResumeStorageBucket
          USER_HISTORY_TABLE: !Ref UserHistoryTable
      Code:
        ZipFile: |
          # Placeholder - will be replaced with actual code

  ResumeProcessorLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ResumeOptimizerProcessor-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt ResumeProcessorRole.Arn
      Timeout: 180
      MemorySize: 512
      Environment:
        Variables:
          STORAGE_BUCKET: !Ref ResumeStorageBucket
          AI_HANDLER_FUNCTION: !Ref AIHandlerLambda
      Code:
        ZipFile: |
          # Placeholder - will be replaced with actual code

  # Update Resume Processor Role with specific Lambda ARN
  ResumeProcessorRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InvokeAIHandlerPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'lambda:InvokeFunction'
            Resource: !GetAtt AIHandlerLambda.Arn
      Roles:
        - !Ref ResumeProcessorRole

  # Contact Handler Lambda Function
  ContactHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'ResumeOptimizerContactHandler-${Environment}'
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt ContactHandlerRole.Arn
      Code:
        ZipFile: |
          import json
          import boto3
          import logging
          from datetime import datetime

          logger = logging.getLogger()
          logger.setLevel(logging.INFO)

          ses_client = boto3.client('ses', region_name='us-east-1')

          def lambda_handler(event, context):
              headers = {
                  'Access-Control-Allow-Origin': '*',
                  'Access-Control-Allow-Headers': 'Content-Type,Authorization',
                  'Access-Control-Allow-Methods': 'POST,OPTIONS'
              }
              
              try:
                  if event['httpMethod'] == 'OPTIONS':
                      return {
                          'statusCode': 200,
                          'headers': headers,
                          'body': json.dumps({'message': 'CORS preflight'})
                      }
                  
                  body = json.loads(event['body'])
                  from_name = body.get('fromName', 'Unknown User')
                  from_email = body.get('fromEmail', 'unknown@example.com')
                  subject = body.get('subject', 'No Subject')
                  message = body.get('message', 'No Message')
                  timestamp = body.get('timestamp', datetime.now().isoformat())
                  
                  if not subject.strip() or not message.strip():
                      return {
                          'statusCode': 400,
                          'headers': headers,
                          'body': json.dumps({'error': 'Subject and message are required'})
                      }
                  
                  email_subject = f"JobTailorAI Contact: {subject}"
                  email_body = f"Contact Form Submission from JobTailorAI\\n\\nFrom: {from_name} ({from_email})\\nSubject: {subject}\\n\\nMessage:\\n{message}\\n\\n---\\nSent from JobTailorAI Contact Form\\nTime: {timestamp}"
                  
                  try:
                      response = ses_client.send_email(
                          Source='abidshariff009@gmail.com',
                          Destination={
                              'ToAddresses': ['abidshariff009@gmail.com']
                          },
                          Message={
                              'Subject': {
                                  'Data': email_subject,
                                  'Charset': 'UTF-8'
                              },
                              'Body': {
                                  'Text': {
                                      'Data': email_body,
                                      'Charset': 'UTF-8'
                                  }
                              }
                          },
                          ReplyToAddresses=[from_email] if from_email != 'unknown@example.com' else []
                      )
                      logger.info(f"Email sent successfully. MessageId: {response['MessageId']}")
                  except Exception as ses_error:
                      logger.error(f"SES Error: {str(ses_error)}")
                  
                  logger.info(f"Contact form submitted by {from_name} ({from_email}): {subject}")
                  
                  return {
                      'statusCode': 200,
                      'headers': headers,
                      'body': json.dumps({
                          'message': 'Contact form submitted successfully',
                          'timestamp': timestamp
                      })
                  }
                  
              except Exception as e:
                  logger.error(f"Error: {str(e)}")
                  return {
                      'statusCode': 500,
                      'headers': headers,
                      'body': json.dumps({'error': 'Internal server error'})
                  }
      Timeout: 30
      MemorySize: 128

  # Contact Handler Lambda Role
  ContactHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SESPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ses:SendEmail'
                  - 'ses:SendRawEmail'
                Resource: '*'

  # API Layer
  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Sub 'ResumeOptimizerAPI-${Environment}'
      Description: API for Resume Optimizer application
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: ResumeOptimizerCognitoAuthorizer
      RestApiId: !Ref ApiGateway
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      ProviderARNs:
        - !GetAtt UserPool.Arn

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: optimize

  ApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ResumeProcessorLambda.Arn}/invocations'
      
  ApiGatewayOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST,GET,PUT,DELETE'"
              method.response.header.Access-Control-Allow-Origin: "'https://main.d3tjpmlvy19b2l.amplifyapp.com'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Status endpoint resource
  ApiGatewayStatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: status

  # Status endpoint GET method
  ApiGatewayStatusMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayStatusResource
      HttpMethod: GET
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:ResumeOptimizerStatusChecker-${Environment}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Status endpoint OPTIONS method for CORS
  ApiGatewayStatusOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayStatusResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,Accept'"
              method.response.header.Access-Control-Allow-Methods: "'OPTIONS,GET'"
              method.response.header.Access-Control-Allow-Origin: "'https://main.d3tjpmlvy19b2l.amplifyapp.com'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true

  # Contact endpoint resource
  ApiGatewayContactResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref ApiGateway
      ParentId: !GetAtt ApiGateway.RootResourceId
      PathPart: contact

  # Contact endpoint POST method
  ApiGatewayContactMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayContactResource
      HttpMethod: POST
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref ApiGatewayAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ContactHandlerLambda.Arn}/invocations'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true

  # Contact endpoint OPTIONS method for CORS
  ApiGatewayContactOptionsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayContactResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Credentials: "'true'"
            ResponseTemplates:
              application/json: '{}'
        PassthroughBehavior: WHEN_NO_MATCH
        RequestTemplates:
          application/json: '{"statusCode": 200}'
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Credentials: true

  ApiGatewayDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ApiGatewayMethod
      - ApiGatewayOptionsMethod
      - ApiGatewayStatusMethod
      - ApiGatewayStatusOptionsMethod
      - ApiGatewayContactMethod
      - ApiGatewayContactOptionsMethod
    Properties:
      RestApiId: !Ref ApiGateway
      StageName: !Ref Environment
      Description: !Sub 'Deployment with contact endpoint - ${AWS::StackName}'

  # Lambda permissions for API Gateway
  ResumeProcessorPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ResumeProcessorLambda
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/optimize'

  # Permission for API Gateway to invoke Status Checker Lambda
  LambdaApiGatewayStatusPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Sub 'ResumeOptimizerStatusChecker-${Environment}'
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/GET/status'

  # Permission for API Gateway to invoke Contact Handler Lambda
  ContactHandlerPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref ContactHandlerLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/contact'

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/optimize'
  
  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
  
  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
  
  StorageBucket:
    Description: S3 Bucket for resume storage
    Value: !Ref ResumeStorageBucket
